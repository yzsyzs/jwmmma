const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
let url = require('url');
const express = require('express')
// 设置favicon
const favicon = require('serve-favicon')
const compression = require('compression')
const microcache = require('route-cache')
const resolve = file => path.resolve(__dirname, file)
const {createBundleRenderer} = require('vue-server-renderer')
// 设置代理
var proxy = require('./proxy.js')
// var proxy = require('express-http-proxy')
//生成siteMap.xml文件
const siteMap = require('./src/siteMap')
// cookie
// const cookieParser = require('cookie-parser')

// 设置日志插件
var log4js = require('log4js')
log4js.configure({
    appenders: {
        out: { type: 'stdout' },
        app: { type: 'file', filename: 'mma_ssr_node.log' }
    },
    categories: {
        default: { appenders: [ 'out', 'app' ], level: 'debug' }
    }
});
var logger = log4js.getLogger('custom-appender');
logger.debug("Time:",new Date().toLocaleString());

const isProd = process.env.NODE_ENV === 'production'
const useMicroCache = process.env.MICRO_CACHE !== 'false'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()
function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
    return createBundleRenderer(bundle, Object.assign(options, {
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer
let readyPromise
const templatePath = resolve('./src/index.template.html')
if (isProd) {
    // In production: create server renderer using template and built server bundle.
    // The server bundle is generated by vue-ssr-webpack-plugin.
    const template = fs.readFileSync(templatePath, 'utf-8')
    const bundle = require('./dist/vue-ssr-server-bundle.json')
    // The client manifests are optional, but it allows the renderer
    // to automatically infer preload/prefetch links and directly add <script>
    // tags for any async chunks used during render, avoiding waterfall requests.
    const clientManifest = require('./dist/vue-ssr-client-manifest.json')
    renderer = createRenderer(bundle, {
        template,
        clientManifest
    })
} else {
    // In development: setup the dev server with watch and hot-reload,
    // and create a new renderer on bundle / index template update.
    readyPromise = require('./build/setup-dev-server')(
        app,
        templatePath,
        (bundle, options) => {
            renderer = createRenderer(bundle, options)
        }
    )
}
// 代理接口 127.0.0.1:8000/client
let dxgUrl;
switch (process.env.PORT) {
    case '8001':
        console.log(proxy)
        dxgUrl = 'http://test.cwmmma.com:81'
        dxgUrl2 = 'http://test.cwmmma.com:81'
        proxy(app,'/client',dxgUrl)
        proxy(app,'/userCenter',dxgUrl2)
        break;
    case '8000':
        dxgUrl = 'http://test.cwmmma.com'
        dxgUrl2 = 'http://192.168.60.60:8089'
        proxy(app,'/client',dxgUrl)
        proxy(app,'/userCenter',dxgUrl2)
        break;
    default:
        dxgUrl = 'http://www.cwmmma.com'
        dxgUrl2 = 'http://test.cwmmma.com:81'
        proxy(app,'/client',dxgUrl)
        proxy(app,'/userCenter',dxgUrl2)
}
console.log('数据库地址', dxgUrl);


const serve = (path, cache) => express.static(resolve(path), {
    maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})
app.use(compression({threshold: 0}))
app.use(favicon('./public/favicon.ico'))
app.use('/dist', serve('./dist', true))
app.use('/public', serve('./public', true))
app.use('/manifest.json', serve('./manifest.json', true))
app.use('/service-worker.js', serve('./dist/service-worker.js'))
// app.use(cookieParser())
// app.get('/user_info',(req, res, next) => {
//     //有则开放进入
//     if(req.cookies.mmaUser){
//         next()
//     // session免登陆状态
//     }else if(req.cookies.mmaSession){
//
//     } else {
//         res.redirect('/')
//     }
//
// })
/**
 * seo robots
 */
app.get('/robots.txt', (req, res) => {
    var pathname = url.parse(req.url).pathname;
    fs.readFile(pathname.substring(1), 'utf-8', function (err, data) {
        if (err) {
            res.writeHead(404, {
                'Content-Type': 'text/html; charset=utf-8'
            });
        } else {
            res.writeHead(200, {
                'Content-Type': 'text/html; charset=utf-8'
            });
            res.write(data.toString());
        }
        res.end();
    });
})
/***
 * set
 */
app.get('/sitemap.xml', outPutSiteMap);

function outPutSiteMap(req, res, next) {
    var stream = fs.createReadStream('./../siteMapFile/sitemap.xml', {
        flags: 'r'
    });
    stream.pipe(res);
}

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl))

function render(req, res) {
    const s = Date.now()

    res.setHeader("Content-Type", "text/html")
    res.setHeader("Server", serverInfo)

    const handleError = err => {
        if (err.url) {
            res.redirect(err.url)
        } else if (err.code === 404) {
            res.status(404).send('404 | Page Not Found')
        } else {
            // Render Error Page or Redirect
            res.status(500).send('500 | Internal Server Error')
            console.error(`error during render : ${req.url}`)
            console.error(err.stack)
            logger.debug(`error during render : ${req.url}`)
            logger.debug("Time:",new Date().toLocaleString(), err.stack)
        }
    }

    const context = {
        title: '精武门综合格斗职业联赛', // default title
        // 传入请求的路由
        url: req.url,
        meta:
            `<meta name="keywords" content="精武门，mma"/><meta name="description" content="精武门,mma"/>`
    }
    // 渲染页面
    renderer.renderToString(context, (err, html) => {
        if (err) {
            return handleError(err)
        } else {
            //如果有数据,则添加到网站地图siteMap中
            siteMap.createSiteMap(req.url)
        }
        res.send(html)
        if (!isProd) {
            console.log(`whole request: ${Date.now() - s}ms`)
        }
    })
}

app.get('*', isProd ? render : (req, res) => {
    readyPromise.then(() => render(req, res))
})

const port = process.env.PORT || 8080
app.listen(port, () => {
    console.log(`server started at localhost:${port}`)
})
